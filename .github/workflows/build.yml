name: build-zfs-kmods
on:
  pull_request:
    branches:
      - main
  schedule:
    - cron: '15 4 * * *' # 4:15am UTC everyday
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
  workflow_dispatch:

env:
    IMAGE_REGISTRY: ghcr.io/${{ github.repository_owner }}
    # image_name: zfs-kmods

jobs:
  # zfs_versions:
  #   runs-on: ubuntu-latest
  #   outputs:
  #     latest: ${{ steps.latest.outputs.version }}
  #     previous: ${{ steps.previous.outputs.version }}
  #   steps:
  #     # Use cURL to fetch the given URL, saving the response to `data.json`
  #     - name: Fetch zfs versions
  #       # Uses project_id from: https://release-monitoring.org/project/11706/
  #       run: curl "https://release-monitoring.org/api/v2/versions/?project_id=11706" -o data.json
  #     - name: Get latest zfs version
  #       id: latest
  #       run: echo "version=$(jq -r '.stable_versions[0]' data.json)" >> $GITHUB_OUTPUT
  #     - name: Get previous zfs version
  #       id: previous
  #       run: echo "version=$(jq -r '.stable_versions[1]' data.json)" >> $GITHUB_OUTPUT
  push-ghcr:
    name: Build and push image
    runs-on: ubuntu-22.04
    # needs: zfs_versions
    permissions:
      contents: read
      packages: write
      id-token: write
    strategy:
      fail-fast: false
      matrix:
        image_name: [zfs-kmods]
        version: [39]
        zfs_version:
          - ${{ needs.zfs_versions.outputs.latest }}
        # include:
        #   - coreos_version: stable
        #     is_latest_version: true
        #     is_stable_version: true
         #- coreos_version: testing
         #  is_latest_version: true
         #  is_stable_version: false
    steps: 
      # Checkout push-to-registry action GitHub repository
      - name: Checkout Push to Registry action
        uses: actions/checkout@v3

      - name: Matrix Variables
        run: echo "IMAGE_NAME=${{ matrix.image_name }}" >> $GITHUB_ENV

      - name: Generate tags
        id: generate-tags
        shell: bash
        run: |
          # Generate a timestamp for creating an image version history
          TIMESTAMP="$(date +%Y%m%d)"
          VARIANT="${{ matrix.version }}"

          COMMIT_TAGS=()
          BUILD_TAGS=()

          # Have tags for tracking builds during pull request
          SHA_SHORT="$(git rev-parse --short HEAD)"
          COMMIT_TAGS+=("pr-${{ github.event.number }}-${VARIANT}")
          COMMIT_TAGS+=("${SHA_SHORT}-${VARIANT}")

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              COMMIT_TAGS+=("pr-${{ github.event.number }}")
              COMMIT_TAGS+=("${SHA_SHORT}")
          fi

          BUILD_TAGS=("${VARIANT}")

          # Append matching timestamp tags to keep a version history
          for TAG in "${BUILD_TAGS[@]}"; do
              BUILD_TAGS+=("${TAG}-${TIMESTAMP}")
          done

          if [[ "${{ matrix.is_latest_version }}" == "true" ]] && \
             [[ "${{ matrix.is_stable_version }}" == "true" ]]; then
              BUILD_TAGS+=("${TIMESTAMP}")
              BUILD_TAGS+=("latest")
          fi

          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
              echo "Generated the following commit tags: "
              for TAG in "${COMMIT_TAGS[@]}"; do
                  echo "${TAG}"
              done

              alias_tags=("${COMMIT_TAGS[@]}")
          else
              alias_tags=("${BUILD_TAGS[@]}")
          fi

          echo "Generated the following build tags: "
          for TAG in "${BUILD_TAGS[@]}"; do
              echo "${TAG}"
          done

          echo "alias_tags=${alias_tags[*]}" >> $GITHUB_OUTPUT

      # - name: Retrieve akmods signing key
      #   run: |
      #     mkdir -p certs
      #     if [[ "${{ github.event_name }}" == "pull_request" ]]; then
      #         echo "Using test signing key"
      #     else
      #         echo "${{ secrets.AKMOD_PRIVKEY }}" > certs/private_key.priv
      #     fi
      #     # DEBUG: get character count of key
      #     wc -c certs/private_key.priv

      # Build metadata
      - name: Image Metadata
        uses: docker/metadata-action@v4
        id: meta
        with:
          images: |
            ${{ matrix.image_name }}
          labels: |
            org.opencontainers.image.title=${{ matrix.image_name }}
            org.opencontainers.image.description=A layer with driver RPMs for fedora-ostree-desktops
            io.artifacthub.package.readme-url=https://raw.githubusercontent.com/${{ github.repository_owner }}/${{ matrix.image_name }}/main/README.md
      # Build image using Buildah action
      - name: Build Image
        id: build_image
        uses: redhat-actions/buildah-build@v2
        with:
          containerfiles: |
            ./Containerfile
          # Syntax: https://docs.github.com/en/actions/learn-github-actions/expressions#format
          image: ${{ env.IMAGE_NAME }}
          tags: |
            ${{ steps.generate-tags.outputs.alias_tags }}
          build-args: |
            IMAGE_NAME=${{ env.IMAGE_NAME }}
            BASE_VERSION=${{ matrix.version }}
            # ZFS_VERSION=${{ matrix.zfs_version }}
          labels: ${{ steps.meta.outputs.labels }}
          oci: false

      # Workaround bug where capital letters in your GitHub username make it impossible to push to GHCR.
      # https://github.com/macbre/push-to-ghcr/issues/12
      - name: Lowercase Registry
        id: registry_case
        uses: ASzc/change-string-case-action@v5
        with:
          string: ${{ env.IMAGE_REGISTRY }}

      # Push the image to GHCR (Image Registry)
      - name: Push To GHCR
        uses: redhat-actions/push-to-registry@v2
        id: push
        env:
          REGISTRY_USER: ${{ github.actor }}
          REGISTRY_PASSWORD: ${{ github.token }}
        with:
          image: ${{ steps.build_image.outputs.image }}
          tags: ${{ steps.build_image.outputs.tags }}
          registry: ${{ steps.registry_case.outputs.lowercase }}
          username: ${{ env.REGISTRY_USER }}
          password: ${{ env.REGISTRY_PASSWORD }}
          extra-args: |
            --disable-content-trust

      # Sign container
      - uses: sigstore/cosign-installer@main

      # Only needed when running `cosign sign` using a key
      - name: Write signing key to disk
        run: |
          echo "${{ env.COSIGN_PRIVATE_KEY }}" > cosign.key
          # DEBUG: get character count of key
          wc -c cosign.key
        env:
          COSIGN_PRIVATE_KEY: ${{ secrets.SIGNING_SECRET }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Sign container image
        run: |
          cosign sign --yes --key cosign.key ${{ steps.registry_case.outputs.lowercase }}/${{ steps.build_image.outputs.image }}@${TAGS}
        env:
          TAGS: ${{ steps.push.outputs.digest }}

      - name: Echo outputs
        run: |
          echo "${{ toJSON(steps.push.outputs) }}"
